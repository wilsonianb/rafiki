version: '3'
services:
  auth:
    image: ghcr.io/interledger/rafiki-auth:latest
    build:
      context: ../..
      dockerfile: ./packages/auth/Dockerfile
    restart: always
    networks:
      - rafiki
    ports:
      - '3006:3006'
    environment:
      NODE_ENV: development
      AUTH_DATABASE_URL: postgresql://auth:auth@database/auth
      INTROSPECTION_HTTPSIG: "false"
    depends_on:
      - tigerbeetle
      - database
  fynbos:
    build:
      context: ../..
      dockerfile: ./packages/mock-account-provider/Dockerfile
    restart: always
    networks:
      - rafiki
    ports:
      - '3030:80'
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      PORT: 80
      SEED_FILE_LOCATION: /workspace/seed.primary.yml
      KEY_FILE: /workspace/private-key.pem
    volumes:
      - ./seed.primary.yml:/workspace/seed.primary.yml
      - ./private-key.pem:/workspace/private-key.pem
    depends_on:
      - backend
  backend:
    image: ghcr.io/interledger/rafiki-backend:latest
    build:
      context: ../..
      dockerfile: ./packages/backend/Dockerfile
    restart: always
    privileged: true
    ports:
      - '3000:80'
      - '3001:3001'
    networks:
      - rafiki
    environment:
      NODE_ENV: development
      LOG_LEVEL: debug
      ADMIN_PORT: 3001
      CONNECTOR_PORT: 3002
      OPEN_PAYMENTS_PORT: 80
      DATABASE_URL: postgresql://backend:backend@database/backend
      TIGERBEETLE_CLUSTER_ID: 0
      # Tigerbeetle will support DNS in future
      TIGERBEETLE_REPLICA_ADDRESSES: '["10.5.0.50:4342"]'
      NONCE_REDIS_KEY: test
      AUTH_SERVER_GRANT_URL: http://auth:3006
      AUTH_SERVER_INTROSPECTION_URL: http://auth:3006/introspect
      ILP_ADDRESS: test.rafiki
      STREAM_SECRET: BjPXtnd00G2mRQwP/8ZpwyZASOch5sUXT5o0iR5b5wU=
      ADMIN_KEY: admin
      PUBLIC_HOST: http://backend
      OPEN_PAYMENTS_URL: http://backend
      WEBHOOK_URL: http://fynbos/webhooks
      PRICES_URL: http://fynbos/prices
      REDIS_URL: redis://redis:6379/0
      QUOTE_URL: http://fynbos/quotes
      PAYMENT_POINTER_URL: https://backend/.well-known/pay
    depends_on:
      - tigerbeetle
      - database
      - redis
  database:
    image: 'postgres:15' # use latest official postgres version
    restart: unless-stopped
    networks:
      - rafiki
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
      - ./dbinit.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
  tigerbeetle:
    image: ghcr.io/tigerbeetledb/tigerbeetle@sha256:c376d8d6c6b206de630cd703eda1ea4c580e6f7fed52aa5bc84dc935d52f5a41
    restart: unless-stopped
    privileged: true
    volumes:
      - tigerbeetle-data:/var/lib/tigerbeetle
    networks:
      rafiki:
        ipv4_address: 10.5.0.50
    entrypoint:
      - /bin/sh
      - -c
      - |
        set -ex
        DATA_FILE=/var/lib/tigerbeetle/cluster_0000000000_replica_000.tigerbeetle
        set +e
        ls $$DATA_FILE
        DATA_FILE_EXISTS="$$?"
        set -e
        echo $$DATA_FILE_EXISTS
        if [ "$$DATA_FILE_EXISTS" != 0 ]; then 
          /opt/beta-beetle/tigerbeetle init --cluster=0 --replica=0 --directory=/var/lib/tigerbeetle; 
        fi
        hostname -I
        ls /var/lib/tigerbeetle
        DATA_FILE=/var/lib/tigerbeetle/cluster_0000000000_replica_000.tigerbeetle
        /opt/beta-beetle/tigerbeetle start --cluster="0" --replica="0" --directory=/var/lib/tigerbeetle --addresses=0.0.0.0:4342
  redis:
    image: 'redis:7'
    restart: unless-stopped
    networks:
      - rafiki
  signatures:
    build:
      context: ../..
      dockerfile: ./packages/http-signature-utils/Dockerfile
    restart: always
    ports:
      - '3040:3000'
    environment:
      KEY_FILE: /workspace/private-key.pem
    volumes:
      - ./private-key.pem:/workspace/private-key.pem
    networks:
      - rafiki
volumes:
  database-data: # named volumes can be managed easier using docker-compose
  tigerbeetle-data: # named volumes can be managed easier using docker-compose

networks:
  rafiki:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/24
          gateway: 10.5.0.1
