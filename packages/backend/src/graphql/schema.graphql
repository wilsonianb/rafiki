type Query {
  account(id: String!): Account

  "Fetch a page of accounts."
  accounts(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): AccountsConnection!

  asset(id: String!): Asset

  "Fetch a page of assets."
  assets(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): AssetsConnection!

  outgoingPayment(id: String!): OutgoingPayment

  "Get a webhook by ID."
  webhook("The ID of the webhook to get." id: String!): Webhook!

  "Get a deposit by ID."
  deposit("The ID of the deposit to get." id: String!): Deposit!

  "Get a withdrawal by ID."
  withdrawal("The ID of the withdrawal to get." id: String!): Withdrawal!
}

type Mutation {
  "Create account"
  createAccount(input: CreateAccountInput!): CreateAccountMutationResponse!

  "Update account"
  updateAccount(input: UpdateAccountInput!): UpdateAccountMutationResponse!

  "Delete account"
  deleteAccount(id: String!): DeleteAccountMutationResponse!

  "Create asset"
  createAsset(input: AssetInput!): CreateAssetMutationResponse!

  createOutgoingPayment(
    input: CreateOutgoingPaymentInput!
  ): OutgoingPaymentResponse!
  "Approve a Ready payment's quote."
  approveOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!
  "Requote a Cancelled payment."
  requoteOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!
  "Cancel a Ready payment."
  cancelOutgoingPayment(paymentId: String!): OutgoingPaymentResponse!

  "Transfer between accounts"
  transfer(
    sourceAmount: UInt64!
    sourceAccountId: ID!
    destinationAccountId: ID!
    destinationAmount: UInt64
    autoCommit: Boolean
    idempotencyKey: ID!
  ): TransferMutationResponse

  "Create webhook"
  createWebhook(
    "The id of the account to create the webhook for."
    ilpAccountId: String!
  ): CreateWebhookMutationResponse

  "Update webhook"
  updateWebhook(
    "The id of the webhook to update."
    webhookId: ID!
  ): UpdateWebhookMutationResponse

  "Delete webhook"
  deleteWebhook(
    "The id of the webhook to delete."
    webhookId: ID!
  ): DeleteWebhookMutationResponse

  "Create deposit"
  createDeposit(input: CreateDepositInput!): CreateDepositMutationResponse

  "Create withdrawal"
  createWithdrawal(
    input: CreateWithdrawalInput!
  ): CreateWithdrawalMutationResponse

  "Finalize pending withdrawal"
  finalizePendingWithdrawal(
    "The id of the pending withdrawal to finalize."
    withdrawalId: String!
  ): FinalizePendingWithdrawalMutationResponse

  "Rollback pending withdrawal"
  rollbackPendingWithdrawal(
    "The id of the pending withdrawal to rollback."
    withdrawalId: String!
  ): RollbackPendingWithdrawalMutationResponse
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type AccountsConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge!]!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

input CreateAccountInput {
  id: String
  disabled: Boolean
  maxPacketAmount: UInt64
  http: HttpInput
  asset: AssetInput!
  stream: StreamInput
  routing: RoutingInput
}

input UpdateAccountInput {
  id: String
  disabled: Boolean
  maxPacketAmount: UInt64
  http: HttpInput
  stream: StreamInput
  routing: RoutingInput
}

input HttpInput {
  incoming: HttpIncomingInput!
  outgoing: HttpOutgoingInput!
}

input HttpIncomingInput {
  authTokens: [String!]!
}

input HttpOutgoingInput {
  authToken: String!
  endpoint: String!
}

type AssetsConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge!]!
}

type AssetEdge {
  node: Asset!
  cursor: String!
}

input AssetInput {
  code: String!
  scale: Int!
}

input StreamInput {
  enabled: Boolean!
}

input RoutingInput {
  staticIlpAddress: String!
}

input CreateDepositInput {
  "The id of the account to create the deposit for."
  accountId: String!
  "Amount of deposit."
  amount: UInt64!
  "The id of the deposit."
  id: String
}

input CreateWithdrawalInput {
  "The id of the account to create the withdrawal for."
  accountId: String!
  "Amount of withdrawal."
  amount: UInt64!
  "The id of the withdrawal."
  id: String
}

type Asset {
  id: ID!
  code: String!
  scale: Int!
}

enum WithdrawalError {
  AlreadyFinalized
  AlreadyRolledBack
  InsufficientBalance
  InsufficientLiquidity
  InvalidId
  UnknownAccount
  UnknownAsset
  UnknownWithdrawal
  WithdrawalExists
}

type Account {
  id: ID!
  disabled: Boolean!
  maxPacketAmount: UInt64
  http: Http
  asset: Asset!
  stream: Stream!
  routing: Routing

  balance: UInt64!
  deposits(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): DepositsConnection!
  invoices(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): InvoiceConnection
  webhooks(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
  ): WebhooksConnection!
}

type Http {
  outgoing: HttpOutgoing!
}

type HttpOutgoing {
  authToken: String!
  endpoint: String!
}

type Stream {
  enabled: Boolean!
}

type Routing {
  staticIlpAddress: String!
  inheritFromRemote: Boolean
  dynamicIlpAddress: String
}

type InvoiceConnection {
  pageInfo: PageInfo!
  edges: [InvoiceEdge!]!
}

type InvoiceEdge {
  node: Invoice!
  cursor: String!
}

type Invoice {
  id: ID!
  receivedAmount: UInt64!
  maximumAmount: UInt64
  asset: Asset!
  active: Boolean!
  createdAt: String!
  expiresAt: String
  description: String
  totalAmount: String!
}

type OutgoingPayment {
  id: ID!
  state: PaymentState!
  error: String
  stateAttempts: Int!
  intent: PaymentIntent
  quote: PaymentQuote
  accountId: String!
  reservedBalanceId: String!
  sourceAccountId: String!
  asset: Asset!
  destinationAccount: PaymentDestinationAccount!
  outcome: OutgoingPaymentOutcome!
}

type PaymentIntent {
  paymentPointer: String
  amountToSend: UInt64
  invoiceUrl: String
  autoApprove: Boolean!
}

enum PaymentState {
  "Will transition to READY when quote is complete"
  INACTIVE
  "Quote ready; awaiting user approval (ACTIVATED) or refusal (CANCELLING)"
  READY
  "Will transition to SENDING once payment funds are reserved"
  ACTIVATED
  "Paying, will transition to COMPLETED on success"
  SENDING
  "Will transition to CANCELLED when reserved funds are rolled back"
  CANCELLING
  "Payment aborted; can be requoted to INACTIVE"
  CANCELLED
  "Successfuly completion"
  COMPLETED
}

enum PaymentType {
  FIXED_SEND
  FIXED_DELIVERY
}

type PaymentQuote {
  timestamp: String!
  activationDeadline: String!
  targetType: PaymentType!
  minDeliveryAmount: UInt64!
  maxSourceAmount: UInt64!
  maxPacketAmount: UInt64!
  minExchangeRate: Float!
  lowExchangeRateEstimate: Float!
  highExchangeRateEstimate: Float!
}

type PaymentDestinationAccount {
  scale: Int!
  code: String!
  url: String
}

type OutgoingPaymentOutcome {
  amountSent: String!
}

input CreateOutgoingPaymentInput {
  sourceAccountId: String!
  paymentPointer: String
  amountToSend: UInt64
  invoiceUrl: String
  autoApprove: Boolean!
}

type OutgoingPaymentResponse {
  code: String!
  success: Boolean!
  message: String
  payment: OutgoingPayment
}

type WebhooksConnection {
  pageInfo: PageInfo!
  edges: [WebhookEdge!]!
}

type WebhookEdge {
  node: Webhook!
  cursor: String!
}

type Webhook {
  id: ID!
}

type DepositsConnection {
  pageInfo: PageInfo!
  edges: [DepositEdge!]!
}

type DepositEdge {
  node: Deposit!
  cursor: String!
}

type Deposit {
  id: ID!
  amount: UInt64!
  accountId: ID!
  # createdTime: Int!
}

type WithdrawalsConnection {
  pageInfo: PageInfo!
  edges: [WithdrawalEdge!]!
}

type WithdrawalEdge {
  node: Withdrawal!
  cursor: String!
}

type Withdrawal {
  id: ID!
  amount: UInt64!
  accountId: ID!
  # createdTime: Int!
  # finalizedTime: Int
}

type CreateAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type UpdateAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  account: Account
}

type DeleteAccountMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type CreateAssetMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  asset: Asset
}

type TransferMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type CreateWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  webhook: Webhook!
}

type UpdateWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  webhook: Webhook!
}

type DeleteWebhookMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type CreateDepositMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  deposit: Deposit
}

type CreateWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  withdrawal: Withdrawal
  error: WithdrawalError
}

type FinalizePendingWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: WithdrawalError
}

type RollbackPendingWithdrawalMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  error: WithdrawalError
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

scalar UInt64
