/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = {
  "/": {
    /**
     * Get a Payment Pointer 
     * @description Retrieve the public information of the Payment Pointer.
     * 
     * This end-point should be open to anonymous requests as it allows clients to verify a Payment Pointer URL and get the basic information required to construct new transactions and discover the grant request URL.
     * 
     * The content should be slow changing and cacheable for long periods. Servers SHOULD use cache control headers.
     */
    get: operations["get-payment-pointer"];
  };
  "/jwks.json": {
    /**
     * Get the keys bound to a Payment Pointer 
     * @description Retrieve the public keys of the Payment Pointer.
     */
    get: operations["get-payment-pointer-keys"];
  };
  "/connections/{id}": {
    /**
     * Get ILP STREAM credentials for a connection 
     * @description *NB* Use server url specific to this path.
     * 
     * Fetch new connection credentials for an ILP STREAM connection.
     * 
     * A connection is an ephemeral resource that is created to accommodate new incoming payments.
     * 
     * A new set of credential will be generated each time this API is called.
     */
    get: operations["get-ilp-stream-connection"];
    
  };
  "/incoming-payments": {
    /**
     * List Incoming Payments 
     * @description List all incoming payments on the payment pointer
     */
    get: operations["list-incoming-payments"];
    /**
     * Create an Incoming Payment 
     * @description A client MUST create an **incoming payment** resource before it is possible to send any payments to the payment pointer.
     * 
     * All of the input parameters are _optional_.
     */
    post: operations["create-incoming-payment"];
  };
  "/outgoing-payments": {
    /**
     * List Outgoing Payments 
     * @description List all outgoing payments on the payment pointer
     */
    get: operations["list-outgoing-payments"];
    /**
     * Create an Outgoing Payment 
     * @description An **outgoing payment** is a sub-resource of a payment pointer. It represents a payment from the payment pointer.
     */
    post: operations["create-outgoing-payment"];
  };
  "/quotes": {
    /**
     * Create a Quote 
     * @description A **quote** is a sub-resource of a payment pointer. It represents a quote for a payment from the payment pointer.
     */
    post: operations["create-quote"];
  };
  "/incoming-payments/{id}": {
    /**
     * Get an Incoming Payment 
     * @description A client can fetch the latest state of an incoming payment to determine the amount received into the payment pointer.
     */
    get: operations["get-incoming-payment"];
    
  };
  "/incoming-payments/{id}/complete": {
    /**
     * Complete an Incoming Payment 
     * @description A client with the appropriate permissions MAY mark a non-expired **incoming payment** as `completed` if it has not yet received `incomingAmount`.
     * 
     * This indicates to the receiving account provider that it can begin any post processing of the payment such as generating account statements or notifying the account holder of the completed payment.
     */
    post: operations["complete-incoming-payment"];
    
  };
  "/outgoing-payments/{id}": {
    /**
     * Get an Outgoing Payment 
     * @description A client can fetch the latest state of an outgoing payment.
     */
    get: operations["get-outgoing-payment"];
    
  };
  "/quotes/{id}": {
    /**
     * Get a Quote 
     * @description A client can fetch the latest state of a quote.
     */
    get: operations["get-quote"];
    
  };
};

export type components = {
  schemas: {
    /**
     * Payment Pointer 
     * @description A **payment pointer** resource is the root of the API and contains the public details of the financial account represented by the Payment Pointer that is also the service endpoint URL.
     */
    "payment-pointer": {
      /**
       * Format: uri 
       * @description The URL identifying the incoming payment.
       */
      id: string;
      /** @description A public name for the account. This should be set by the account holder with their provider to provide a hint to counterparties as to the identity of the account holder. */
      publicName?: string;
      assetCode: external["schemas.yaml"]["components"]["schemas"]["assetCode"];
      assetScale: external["schemas.yaml"]["components"]["schemas"]["assetScale"];
      /**
       * Format: uri 
       * @description The URL of the authorization server endpoint for getting grants and access tokens for this payment pointer.
       */
      authServer: string;
    };
    /**
     * JSON Web Key Set document 
     * @description A JSON Web Key Set document according to [rfc7517](https://datatracker.ietf.org/doc/html/rfc7517) listing the keys associated with this payment pointer. These keys are used to sign requests made by this payment pointer.
     */
    "json-web-key-set": {
      keys: readonly (components["schemas"]["json-web-key"])[];
    };
    /**
     * ILP Stream Connection 
     * @description An **ILP STREAM Connection** is an endpoint that returns unique STREAM connection credentials to establish a STREAM connection to the underlying account.
     */
    "ilp-stream-connection": {
      /**
       * Format: uri 
       * @description The URL identifying the endpoint.
       */
      id: string;
      /** @description The ILP address to use when establishing a STREAM connection. */
      ilpAddress: string;
      /** @description The base64 url-encoded shared secret to use when establishing a STREAM connection. */
      sharedSecret: string;
      assetCode: external["schemas.yaml"]["components"]["schemas"]["assetCode"];
      assetScale: external["schemas.yaml"]["components"]["schemas"]["assetScale"];
    };
    /**
     * Incoming Payment 
     * @description An **incoming payment** resource represents a payment that will be, is currently being, or has been received by the account.
     */
    "incoming-payment": {
      /**
       * Format: uri 
       * @description The URL identifying the incoming payment.
       */
      id: string;
      /**
       * Format: uri 
       * @description The URL of the payment pointer this payment is being made into.
       */
      paymentPointer: string;
      /**
       * @description Describes whether the incoming payment has completed receiving fund. 
       * @default false
       */
      completed: boolean;
      /** @description The maximum amount that should be paid into the payment pointer under this incoming payment. */
      incomingAmount?: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /** @description The total amount that has been paid into the payment pointer under this incoming payment. */
      receivedAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /**
       * Format: date-time 
       * @description The date and time when payments under this incoming payment will no longer be accepted.
       */
      expiresAt?: string;
      /** @description Human readable description of the incoming payment that will be visible to the account holder. */
      description?: string;
      /** @description A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. */
      externalRef?: string;
      /**
       * Format: date-time 
       * @description The date and time when the incoming payment was created.
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description The date and time when the incoming payment was updated.
       */
      updatedAt: string;
    };
    /**
     * Incoming Payment with Connection 
     * @description An **incoming payment** resource with the Interledger STREAM Connection to use to pay into the payment pointer under this incoming payment.
     */
    "incoming-payment-with-connection": components["schemas"]["incoming-payment"] & {
      ilpStreamConnection?: components["schemas"]["ilp-stream-connection"];
    };
    /**
     * Incoming Payment with Connection 
     * @description An **incoming payment** resource with the url for the Interledger STREAM Connection resource to use to pay into the payment pointer under this incoming payment.
     */
    "incoming-payment-with-connection-url": components["schemas"]["incoming-payment"] & {
      /**
       * Format: uri 
       * @description Endpoint that returns unique STREAM connection credentials to establish a STREAM connection to the underlying account.
       */
      ilpStreamConnection?: string;
    };
    /**
     * Outgoing Payment 
     * @description An **outgoing payment** resource represents a payment that will be, is currently being, or has previously been, sent from the payment pointer.
     */
    "outgoing-payment": {
      /**
       * Format: uri 
       * @description The URL identifying the outgoing payment.
       */
      id: string;
      /**
       * Format: uri 
       * @description The URL of the payment pointer from which this payment is sent.
       */
      paymentPointer: string;
      /**
       * Format: uri 
       * @description The URL of the quote defining this payment's amounts.
       */
      quoteId?: string;
      /**
       * @description Describes whether the payment failed to send its full amount. 
       * @default false
       */
      failed?: boolean;
      /** @description The URL of the incoming payment or ILP STREAM Connection that is being paid. */
      receiver: external["schemas.yaml"]["components"]["schemas"]["receiver"];
      /** @description The total amount that should be received by the receiver when this outgoing payment has been paid. */
      receiveAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /** @description The total amount that should be sent when this outgoing payment has been paid. */
      sendAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /** @description The total amount that has been sent under this outgoing payment. */
      sentAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /** @description Human readable description of the outgoing payment that will be visible to the account holder and shared with the receiver. */
      description?: string;
      /** @description A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional) */
      externalRef?: string;
      /**
       * Format: date-time 
       * @description The date and time when the outgoing payment was created.
       */
      createdAt: string;
      /**
       * Format: date-time 
       * @description The date and time when the outgoing payment was updated.
       */
      updatedAt: string;
    };
    /**
     * Quote 
     * @description A **quote** resource represents the quoted amount details with which an Outgoing Payment may be created.
     */
    quote: {
      /**
       * Format: uri 
       * @description The URL identifying the quote.
       */
      id: string;
      /**
       * Format: uri 
       * @description The URL of the payment pointer from which this quote's payment would be sent.
       */
      paymentPointer: string;
      receiver: external["schemas.yaml"]["components"]["schemas"]["receiver"];
      receiveAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      sendAmount: external["schemas.yaml"]["components"]["schemas"]["amount"];
      /** @description The date and time when the calculated `sendAmount` is no longer valid. */
      expiresAt?: string;
      /**
       * Format: date-time 
       * @description The date and time when the quote was created.
       */
      createdAt: string;
    };
    /** @description Pagination parameters */
    pagination: components["schemas"]["forward-pagination"] | components["schemas"]["backward-pagination"];
    /** @description Forward pagination parameters */
    "forward-pagination": {
      /** @description The number of items to return. */
      first?: number;
      /** @description The cursor key to list from. */
      cursor?: string;
    };
    /** @description Backward pagination parameters */
    "backward-pagination": {
      /** @description The number of items to return. */
      last?: number;
      /** @description The cursor key to list from. */
      cursor: string;
    };
    "page-info": {
      /** @description Cursor corresponding to the first element in the result array. */
      startCursor: string;
      /** @description Cursor corresponding to the last element in the result array. */
      endCursor: string;
      /** @description Describes whether the data set has further entries. */
      hasNextPage: boolean;
      /** @description Describes whether the data set has previous entries. */
      hasPreviousPage: boolean;
    };
    /**
     * Ed25519 Public Key 
     * @description A JWK representation of an Ed25519 Public Key
     */
    "json-web-key": {
      kid: string;
      /**
       * @description The cryptographic algorithm family used with the key. The only allowed value is `EdDSA`.  
       * @enum {string}
       */
      alg: "EdDSA";
      /** @enum {string} */
      use?: "sig";
      /** @enum {string} */
      kty: "OKP";
      /** @enum {string} */
      crv: "Ed25519";
      /** @description The base64 url-encoded public key. */
      x: string;
    };
  };
  responses: {
    /** @description Authorization required */
    401: never;
    /** @description Forbidden */
    403: never;
  };
  parameters: {
    /** @description Sub-resource identifier */
    id: string;
    /** @description The signature generated based on the Signature-Input, using the signing algorithm specified in the "alg" field of the JWK. */
    signature: string;
    /** @description The Signature-Input field is a Dictionary structured field containing the metadata for one or more message signatures generated from components within the HTTP message.  Each member describes a single message signature.  The member's key is the label that uniquely identifies the message signature within the context of the HTTP message.  The member's value is the serialization of the covered components Inner List plus all signature metadata parameters identified by the label.  The following components MUST be included: - "@method" - "@target-uri" - "authorization".  When the message contains a request body, the covered components MUST also include the following: - "content-digest"  The keyid parameter of the signature MUST be set to the kid value of the JWK.      See [ietf-httpbis-message-signatures](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-message-signatures#section-4.1) for more details. */
    "signature-input": string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = {

  "schemas.yaml": Record<string, never>
};

export type operations = {

  "get-payment-pointer": {
    /**
     * Get a Payment Pointer 
     * @description Retrieve the public information of the Payment Pointer.
     * 
     * This end-point should be open to anonymous requests as it allows clients to verify a Payment Pointer URL and get the basic information required to construct new transactions and discover the grant request URL.
     * 
     * The content should be slow changing and cacheable for long periods. Servers SHOULD use cache control headers.
     */
    responses: {
      /** @description Payment Pointer Found */
      200: {
        content: {
          "application/json": components["schemas"]["payment-pointer"];
        };
      };
      /** @description Payment Pointer Not Found */
      404: never;
    };
  };
  "get-payment-pointer-keys": {
    /**
     * Get the keys bound to a Payment Pointer 
     * @description Retrieve the public keys of the Payment Pointer.
     */
    responses: {
      /** @description JWKS Document Found */
      200: {
        content: {
          "application/json": components["schemas"]["json-web-key-set"];
        };
      };
      /** @description JWKS Document Not Found */
      404: never;
    };
  };
  "get-ilp-stream-connection": {
    /**
     * Get ILP STREAM credentials for a connection 
     * @description *NB* Use server url specific to this path.
     * 
     * Fetch new connection credentials for an ILP STREAM connection.
     * 
     * A connection is an ephemeral resource that is created to accommodate new incoming payments.
     * 
     * A new set of credential will be generated each time this API is called.
     */
    responses: {
      /** @description Connection Found */
      200: {
        content: {
          "application/json": components["schemas"]["ilp-stream-connection"];
        };
      };
      /** @description Connection Not Found */
      404: never;
    };
  };
  "list-incoming-payments": {
    /**
     * List Incoming Payments 
     * @description List all incoming payments on the payment pointer
     */
    parameters?: {
        /** @description Pagination parameters */
      query?: {
        pagination?: components["schemas"]["pagination"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["page-info"];
            result?: (components["schemas"]["incoming-payment-with-connection-url"])[];
          };
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
    };
  };
  "create-incoming-payment": {
    /**
     * Create an Incoming Payment 
     * @description A client MUST create an **incoming payment** resource before it is possible to send any payments to the payment pointer.
     * 
     * All of the input parameters are _optional_.
     */
    /**
     * @description A subset of the incoming payments schema is accepted as input to create a new incoming payment.
     * 
     * The `incomingAmount` must use the same `assetCode` and `assetScale` as the payment pointer.
     */
    requestBody: {
      content: {
        "application/json": {
          /** @description The maximum amount that should be paid into the payment pointer under this incoming payment. */
          incomingAmount?: external["schemas.yaml"]["components"]["schemas"]["amount"];
          /**
           * Format: date-time 
           * @description The date and time when payments into the incoming payment must no longer be accepted.
           */
          expiresAt?: string;
          /** @description Human readable description of the incoming payment that will be visible to the account holder. */
          description?: string;
          /** @description A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional) */
          externalRef?: string;
        };
      };
    };
    responses: {
      /** @description Incoming Payment Created */
      201: {
        content: {
          "application/json": components["schemas"]["incoming-payment-with-connection"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
    };
  };
  "list-outgoing-payments": {
    /**
     * List Outgoing Payments 
     * @description List all outgoing payments on the payment pointer
     */
    parameters?: {
        /** @description Pagination parameters */
      query?: {
        pagination?: components["schemas"]["pagination"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": {
            pagination?: components["schemas"]["page-info"];
            result?: (components["schemas"]["outgoing-payment"])[];
          };
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
    };
  };
  "create-outgoing-payment": {
    /**
     * Create an Outgoing Payment 
     * @description An **outgoing payment** is a sub-resource of a payment pointer. It represents a payment from the payment pointer.
     */
    /**
     * @description A subset of the outgoing payments schema is accepted as input to create a new outgoing payment.
     * 
     * The `sendAmount` must use the same `assetCode` and `assetScale` as the payment pointer.
     */
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: uri 
           * @description The URL of the quote defining this payment's amounts.
           */
          quoteId: string;
          /** @description Human readable description of the outgoing payment that will be visible to the account holder and shared with the receiver. */
          description?: string;
          /** @description A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional) */
          externalRef?: string;
        };
      };
    };
    responses: {
      /** @description Outgoing Payment Created */
      201: {
        content: {
          "application/json": components["schemas"]["outgoing-payment"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
    };
  };
  "create-quote": {
    /**
     * Create a Quote 
     * @description A **quote** is a sub-resource of a payment pointer. It represents a quote for a payment from the payment pointer.
     */
    /**
     * @description A subset of the quotes schema is accepted as input to create a new quote.
     * 
     * The quote must be created with a (`sendAmount` xor `receiveAmount`) unless the `receiver` is an Incoming Payment which has an `incomingAmount`.
     */
    requestBody: {
      content: {
        "application/json": {
          receiver: external["schemas.yaml"]["components"]["schemas"]["receiver"];
          receiveAmount?: external["schemas.yaml"]["components"]["schemas"]["amount"];
          sendAmount?: external["schemas.yaml"]["components"]["schemas"]["amount"];
        };
      };
    };
    responses: {
      /** @description Quote Created */
      201: {
        content: {
          "application/json": components["schemas"]["quote"];
        };
      };
      /** @description No amount was provided and no amount could be inferred from the receiver. */
      400: never;
      401: components["responses"]["401"];
      403: components["responses"]["403"];
    };
  };
  "get-incoming-payment": {
    /**
     * Get an Incoming Payment 
     * @description A client can fetch the latest state of an incoming payment to determine the amount received into the payment pointer.
     */
    responses: {
      /** @description Incoming Payment Found */
      200: {
        content: {
          "application/json": components["schemas"]["incoming-payment-with-connection"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      /** @description Incoming Payment Not Found */
      404: never;
    };
  };
  "complete-incoming-payment": {
    /**
     * Complete an Incoming Payment 
     * @description A client with the appropriate permissions MAY mark a non-expired **incoming payment** as `completed` if it has not yet received `incomingAmount`.
     * 
     * This indicates to the receiving account provider that it can begin any post processing of the payment such as generating account statements or notifying the account holder of the completed payment.
     */
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["incoming-payment"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      /** @description Incoming Payment Not Found */
      404: never;
    };
  };
  "get-outgoing-payment": {
    /**
     * Get an Outgoing Payment 
     * @description A client can fetch the latest state of an outgoing payment.
     */
    responses: {
      /** @description Outgoing Payment Found */
      200: {
        content: {
          "application/json": components["schemas"]["outgoing-payment"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      /** @description Outgoing Payment Not Found */
      404: never;
    };
  };
  "get-quote": {
    /**
     * Get a Quote 
     * @description A client can fetch the latest state of a quote.
     */
    responses: {
      /** @description Quote Found */
      200: {
        content: {
          "application/json": components["schemas"]["quote"];
        };
      };
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      /** @description Quote Not Found */
      404: never;
    };
  };
};
