openapi: 3.1.0
info:
  title: Open Payments
  version: '1.0'
  description: |-
    The Open Payments API is a simple REST API with 4 resource types: **account**, **quote**, **incoming payment** and **outgoing payment**.  

    The *service endpoint* for the API is always the URL of the account resource and all other resources are sub-resources of the account.  

    All resource and collection resource representations use JSON and the media-type `application/json`.  

    The `account` resource has three collections of sub-resources and a single **account holder** sub-resource:   
    1. `/incoming-payments` contains the **incoming payment** sub-resources  
    2. `/outgoing-payments` contains the **outgoing payment** sub-resources  
    3. `/quotes` contains the **quote** sub-resources  

    Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
  summary: An API for open access to financial accounts to send and receive payments.
  contact:
    email: tech@interledger.org
servers:
  - url: 'https://openpayments.guide'
tags:
  - name: account
    description: account operations
  - name: incoming-payment
    description: incoming payment operations
  - name: outgoing-payment
    description: outgoing payment operations
  - name: quote
    description: quote operations
paths:
  '/{id}':
    get:
      summary: Get a Payment Pointer
      tags:
        - account
      responses:
        '200':
          description: Account Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'

        '404':
          description: Account Not Found
      operationId: get-public-account
      description: |-
        Retrieve the public information of the account represented by the Payment Pointer.

        This end-point should be open to anonymous requests as it allows clients to verify a Payment Pointer URL and get the basic information required to construct new transactions and discover the grant request URL.

        The content should be slow changing and cacheable for long periods. Servers SHOULD use cache control headers.
      security: []
    parameters:
      - schema:
          type: string
          format: uuid
        name: id
        in: path
        required: true
        description: Account identifier
  # '/{accountId}/incoming-payments':
  #   post:
  #     summary: Create an Incoming Payment
  #     tags:
  #       - incoming-payment
  #     operationId: create-incoming-payment
  #     responses:
  #       '201':
  #         description: Incoming Payment Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/incoming-payment'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               incomingAmount:
  #                 $ref: '#/components/schemas/amount'
  #               expiresAt:
  #                 type: string
  #                 description: The date and time when payments into the incoming payment must no longer be accepted.
  #                 format: date-time
  #                 writeOnly: true
  #               description:
  #                 type: string
  #                 description: Human readable description of the incoming payment that will be visible to the account holder.
  #               externalRef:
  #                 type: string
  #                 description: A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional)

  #       description: |-
  #         A subset of the incoming payments schema is accepted as input to create a new incoming payment.

  #         The `incomingAmount` must use the same `assetCode` and `assetScale` as the account.
  #     description: |-
  #       A client MUST create an **incoming payment** resource before it is possible to send any payments to the account.

  #       All of the input parameters are _optional_.
  #   get:
  #     summary: List Incoming Payments
  #     operationId: list-incoming-payments
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/list-incoming-payments'

  #         headers: {}
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     description: List all incoming payments on the account
  #     parameters:
  #       - schema:
  #           type: integer
  #           minimum: 1
  #           maximum: 100
  #           default: 10
  #         in: query
  #         name: first
  #         description: 'The number of items to return, forward pagination'
  #       - schema:
  #           type: integer
  #           default: 10
  #           minimum: 1
  #           maximum: 100
  #         in: query
  #         name: last
  #         description: 'The number of items to return, backward pagination'
  #       - schema:
  #           type: string
  #         in: query
  #         name: cursor
  #         description: The cursor key to list from
  #     tags:
  #       - incoming-payment
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  # '/{accountId}/outgoing-payments':
  #   post:
  #     summary: Create an Outgoing Payment
  #     tags:
  #       - outgoing-payment
  #     operationId: create-outgoing-payment
  #     responses:
  #       '201':
  #         description: Outgoing Payment Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/outgoing-payment'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     requestBody:
  #       content:
  #         application/json:

  #           schema:
  #             type: object
  #             properties:
  #               quoteId:
  #                 type: string
  #                 format: uri
  #                 description: The URL of the quote defining this payment's amounts.
  #                 readOnly: true
  #               description:
  #                 type: string
  #                 description: Human readable description of the outgoing payment that will be visible to the account holder and shared with the receiver.
  #               externalRef:
  #                 type: string
  #                 description: A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional)
  #       description: |-
  #         A subset of the outgoing payments schema is accepted as input to create a new outgoing payment.

  #         The `sendAmount` must use the same `assetCode` and `assetScale` as the account.
  #     description: An **outgoing payment** is a sub-resource of an account. It represents a payment from the account.
  #   description: Create a new outgoing payment at the account.
  #   get:
  #     summary: List Outgoing Payments
  #     operationId: list-outgoing-payments
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/list-outgoing-payments'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     description: List all outgoing payments on the account
  #     parameters:
  #       - schema:
  #           type: integer
  #         in: query
  #         name: first
  #         description: 'The number of items to return, forward pagination'
  #       - schema:
  #           type: integer
  #         in: query
  #         name: last
  #         description: 'The number of items to return, backward pagination'
  #       - schema:
  #           type: string
  #         in: query
  #         name: cursor
  #         description: The cursor key to list from
  #     tags:
  #       - outgoing-payment
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  # '/{accountId}/quotes':
  #   post:
  #     summary: Create a Quote
  #     tags:
  #       - quote
  #     operationId: create-quote
  #     responses:
  #       '201':
  #         description: Quote Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/quote'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     requestBody:
  #       content:
  #         application/json:

  #           schema:
  #             type: object
  #             properties:
  #               receivingAccount:
  #                 type: string
  #                 format: uri
  #                 description: The URL of the account that is being paid.
  #               receivingPayment:
  #                 type: string
  #                 format: uri
  #                 description: The URL of the incoming payment that is being paid.
  #               receiveAmount:
  #                 $ref: '#/components/schemas/amount'
  #               sendAmount:
  #                 $ref: '#/components/schemas/amount'
  #       description: |-
  #         A subset of the quotes schema is accepted as input to create a new quote.

  #         The quote must be created with (`receivingPayment` xor `receivingAccount`) and (`sendAmount` xor `receiveAmount`) or `receivingPayment` and no specified amount (assuming the Incoming Payment has an `incomingAmount`).
  #     description: A **quote** is a sub-resource of an account. It represents a quote for a payment from the account.
  #   description: Create a new quote at the account.
  #   get:
  #     summary: List Quotes
  #     operationId: list-quotes
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/list-quotes'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #     description: List all quotes on the account
  #     parameters:
  #       - schema:
  #           type: integer
  #         in: query
  #         name: first
  #         description: 'The number of items to return, forward pagination'
  #       - schema:
  #           type: integer
  #         in: query
  #         name: last
  #         description: 'The number of items to return, backward pagination'
  #       - schema:
  #           type: string
  #         in: query
  #         name: cursor
  #         description: The cursor key to list from
  #     tags:
  #       - quote
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  # '/{accountId}/incoming-payments/{id}':
  #   get:
  #     summary: Get an Incoming Payment
  #     tags:
  #       - incoming-payment
  #     operationId: get-incoming-payment
  #     responses:
  #       '200':
  #         description: Incoming Payment Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/incoming-payment'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         description: Incoming Payment Not Found
  #     description: A client can fetch the latest state of an incoming payment to determine the amount received into the account.
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: id
  #       in: path
  #       required: true
  #       description: Incoming Payment identifier
  #   put:
  #     summary: Update an Incoming Payment
  #     operationId: update-incoming-payment
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/incoming-payment'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         description: Incoming Payment Not Found
  #     description: |-
  #       A client with the appropriate permissions MAY update the state of an **incoming payment** to `completed` if it is in a state of `pending` or `processing`.

  #       This indicates to the receiving account provider that it can begin any post processing of the payment such as generating account statements or notifying the account holder of the completed payment.
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               state:
  #                 type: string
  #                 enum:
  #                   - completed
  #             required:
  #               - state

  #       description: Update the state of the incoming payment to `completed`.
  #     tags:
  #       - incoming-payment
  # '/{accountId}/outgoing-payments/{id}':
  #   get:
  #     summary: Get an Outgoing Payment
  #     tags:
  #       - outgoing-payment
  #     operationId: get-outgoing-payment
  #     responses:
  #       '200':
  #         description: Outgoing Payment Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/outgoing-payment'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         description: Outgoing Payment Not Found
  #     description: A client can fetch the latest state of an outgoing payment.
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: id
  #       in: path
  #       required: true
  #       description: Outgoing Payment identifier
  # '/{accountId}/quotes/{id}':
  #   get:
  #     summary: Get a Quote
  #     tags:
  #       - quote
  #     operationId: get-quote
  #     responses:
  #       '200':
  #         description: Quote Found
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/quote'

  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         description: Quote Not Found
  #     description: A client can fetch the latest state of a quote.
  #   parameters:
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: accountId
  #       in: path
  #       required: true
  #       description: Account identifier
  #     - schema:
  #         type: string
  #         format: uuid
  #       name: id
  #       in: path
  #       required: true
  #       description: Quote identifier
components:
  schemas:
    account:
      title: Account
      type: object
      description: An **account** resource is the root of the API and contains the public details of the financial account represented by the Payment Pointer that is also the service endpoint URL.
      properties:
        id:
          type: string
          format: uri
          description: The URL identifying the incoming payment.
          readOnly: true
        publicName:
          type: string
          description: A public name for the account. This should be set by the account holder with their provider to provide a hint to counterparties as to the identity of the account holder.
          readOnly: true
        assetCode:
          type: string
          description: The asset code of the account. This SHOULD be an ISO4217 currency code.
          readOnly: true
        assetScale:
          type: integer
          minimum: 0
          maximum: 255
          description: The scale of the account.
          readOnly: true
        authServer:
          type: string
          format: uri
          description: The URL of the authorization server endpoint for getting grants and access tokens for this account.
          readOnly: true

    incoming-payment:
      title: Incoming Payment
      description: 'An **incoming payment** resource represents a payment that will be, is currently being, or has been received by the account.'
      type: object

      properties:
        id:
          type: string
          format: uri
          description: The URL identifying the incoming payment.
          readOnly: true
        accountId:
          type: string
          format: uri
          description: The URL of the account this payment is being made into.
          readOnly: true
        state:
          type: string
          description: The state of the payment as described above.
          enum:
            - pending
            - processing
            - completed
            - expired
          default: pending
        incomingAmount:
          $ref: '#/components/schemas/amount'
        receivedAmount:
          $ref: '#/components/schemas/amount'
        expiresAt:
          type: string
          description: The date and time when payments into the incoming payment will no longer be accepted.
          format: date-time
        description:
          type: string
          description: Human readable description of the incoming payment that will be visible to the account holder.
        externalRef:
          type: string
          description: A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional)
        ilpApddress:
          type: string
          description: The ILP address to use when establishing a STREAM connection.
          readOnly: true
        sharedSecret:
          type: string
          description: The shared secret to use when establishing a STREAM connection.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: The date and time when the incoming payment was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the incoming payment was updated.
    outgoing-payment:
      title: Outgoing Payment
      description: 'An **outgoing payment** resource represents a payment that will be, is currently being, or has previously been, sent from the account.'
      type: object

      properties:
        id:
          type: string
          format: uri
          description: The URL identifying the outgoing payment.
          readOnly: true
        accountId:
          type: string
          format: uri
          description: The URL of the account from which this payment is sent.
          readOnly: true
        quoteId:
          type: string
          format: uri
          description: The URL of the quote defining this payment's amounts.
          readOnly: true
        failed:
          type: boolean
          description: Describes whether the payment failed to send its full amount.
          default: false
        receivingPayment:
          type: string
          format: uri
          description: The URL of the incoming payment that is being paid.
        receiveAmount:
          $ref: '#/components/schemas/amount'
        sendAmount:
          $ref: '#/components/schemas/amount'
        sentAmount:
          $ref: '#/components/schemas/amount'
        description:
          type: string
          description: Human readable description of the outgoing payment that will be visible to the account holder and shared with the receiver.
        externalRef:
          type: string
          description: A reference that can be used by external systems to reconcile this payment with their systems. E.g. An invoice number. (Optional)
        createdAt:
          type: string
          format: date-time
          description: The date and time when the outgoing payment was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the outgoing payment was updated.
      required:
        - id
        - accountId
        - receivingPayment
        - sendAmount
        - receiveAmount
        - sentAmount
        - createdAt
        - updatedAt
    quote:
      title: Quote
      description: A **quote** resource represents the quoted amount details with which an Outgoing Payment may be created.
      type: object

      properties:
        id:
          type: string
          format: uri
          description: The URL identifying the quote.
          readOnly: true
        accountId:
          type: string
          format: uri
          description: The URL of the account from which this quote's payment would be sent.
          readOnly: true
        receivingPayment:
          type: string
          format: uri
          description: The URL of the incoming payment that would be paid.
        receiveAmount:
          $ref: '#/components/schemas/amount'
        sendAmount:
          $ref: '#/components/schemas/amount'
        expiresAt:
          type: string
          description: The date and time when the calculated `sendAmount` is no longer valid.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          description: The date and time when the quote was created.
    amount:
      title: Amount
      type: object
      description: |-
        All amounts in open payments are represented as a value and an asset code and scale.

        The `value` is an unsigned 64-bit integer amount, represented as a string.

        The `assetCode` is a code that indicates the underlying asset. In most cases this SHOULD be a 3-character ISO 4217 currency code.

        The `assetScale` indicates how the `value` has been scaled relative to the natural scale of the asset. For example, an `value` of `"1234"` with an `assetScale` of `2` represents an amount of 12.34.

      properties:
        value:
          type: string
          format: uint64
          description: The amount that must be paid into the receiver’s account.
        assetCode:
          type: string
          description: The asset code of the amount. This SHOULD be an ISO4217 currency code.
        assetScale:
          type: integer
          minimum: 0
          maximum: 255
          description: The scale of the amount.
      required:
        - value
        - assetCode
        - assetScale
    pagination:
      description: ''
      type: object

      properties:
        startCursor:
          type: string
          minLength: 1
          description: Cursor corresponding to the first element in the result array.
        endCursor:
          type: string
          minLength: 1
          description: Cursor corresponding to the last element in the result array.
        hasNextPage:
          type: boolean
          description: Describes whether the data set has further entries.
        hasPreviousPage:
          type: boolean
          description: Describes whether the data set has previous entries.
        first:
          type: number
          description: Number of entries requested using forward pagination.
        last:
          type: number
          description: Number of entries requested using backward pagination.
    list-incoming-payments:
      title: list-incoming-payments
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        result:
          type: array
          items:
            $ref: '#/components/schemas/incoming-payment'

    list-outgoing-payments:
      title: list-outgoing-payments
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        result:
          type: array
          items:
            $ref: '#/components/schemas/outgoing-payment'

    list-quotes:
      title: list-quotes
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/pagination'
        result:
          type: array
          items:
            $ref: '#/components/schemas/quote'

  securitySchemes:
    GNAP:
      name: Authorization
      type: apiKey
      in: header
      description: |-
        The API uses the Grant Negotiation and Authorization Protocol for authorization. An access token must be acquired from an authorization server before accessing the API and then provided in the request headers using the prefix `GNAP`.

        All requests must also be signed using a client key over some select headers and a digest of the request body.
  responses:
    '401':
      description: Authorization required
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: The address of the authorization server for grant requests in the format `GNAP as_uri=<URI>`
    '403':
      description: Forbidden
security:
  - GNAP: []
